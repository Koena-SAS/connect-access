"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[88],{544:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return r},contentTitle:function(){return s},metadata:function(){return d},toc:function(){return c},default:function(){return h}});var a=n(7462),l=n(3366),o=(n(7294),n(3905)),i=["components"],r={sidebar_position:1},s="Local environment",d={unversionedId:"developer-documentation/local-environment",id:"developer-documentation/local-environment",isDocsHomePage:!1,title:"Local environment",description:"Requirements",source:"@site/docs/developer-documentation/local-environment.md",sourceDirName:"developer-documentation",slug:"/developer-documentation/local-environment",permalink:"/docs/developer-documentation/local-environment",editUrl:"https://gitlab.com/koena/connect-access/-/edit/master/docs/docs/developer-documentation/local-environment.md",tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1},sidebar:"tutorialSidebar",previous:{title:"Intro",permalink:"/docs/intro"},next:{title:"Contributing",permalink:"/docs/developer-documentation/contributing"}},c=[{value:"Requirements",id:"requirements",children:[],level:2},{value:"Initial steps",id:"initial-steps",children:[{value:"Get the repository",id:"get-the-repository",children:[],level:3},{value:"Configure the git pre-commit hook",id:"configure-the-git-pre-commit-hook",children:[],level:3},{value:"Setup the local environment variable files",id:"setup-the-local-environment-variable-files",children:[],level:3}],level:2},{value:"Install and run without Docker",id:"install-and-run-without-docker",children:[{value:"Database",id:"database",children:[],level:3},{value:"Backend",id:"backend",children:[{value:"Install",id:"install",children:[],level:4},{value:"Apply the database migrations",id:"apply-the-database-migrations",children:[],level:4},{value:"Build lang files",id:"build-lang-files",children:[],level:4},{value:"Run the development server",id:"run-the-development-server",children:[],level:4}],level:3},{value:"Frontend",id:"frontend",children:[{value:"Install",id:"install-1",children:[],level:4},{value:"Build lang files",id:"build-lang-files-1",children:[],level:4},{value:"Run the development server",id:"run-the-development-server-1",children:[],level:4}],level:3}],level:2},{value:"Install and run with Docker",id:"install-and-run-with-docker",children:[{value:"Build and run the development servers",id:"build-and-run-the-development-servers",children:[],level:3},{value:"Execute commands on the frontend or the backend",id:"execute-commands-on-the-frontend-or-the-backend",children:[],level:3}],level:2},{value:"Run Docker staging/production image locally",id:"run-docker-stagingproduction-image-locally",children:[],level:2}],p={toc:c};function h(e){var t=e.components,n=(0,l.Z)(e,i);return(0,o.kt)("wrapper",(0,a.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"local-environment"},"Local environment"),(0,o.kt)("h2",{id:"requirements"},"Requirements"),(0,o.kt)("p",null,"Connect Access can be installed and run locally fully with Docker, or without Docker by installing all the needed interpreters and tools:"),(0,o.kt)("p",null,"For local development using Docker:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Docker Engine v20+"),(0,o.kt)("li",{parentName:"ul"},"Docker Compose v1.29+")),(0,o.kt)("p",null,"For local development without docker:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Python v3.9+"),(0,o.kt)("li",{parentName:"ul"},"Node.js v16+"),(0,o.kt)("li",{parentName:"ul"},"PostgreSQL v13+")),(0,o.kt)("h2",{id:"initial-steps"},"Initial steps"),(0,o.kt)("h3",{id:"get-the-repository"},"Get the repository"),(0,o.kt)("p",null,"To begin, you have to clone the repository locally:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"git clone https://gitlab.com/koena/connect-access.git\n")),(0,o.kt)("h3",{id:"configure-the-git-pre-commit-hook"},"Configure the git pre-commit hook"),(0,o.kt)("p",null,"Then you can install the python ",(0,o.kt)("inlineCode",{parentName:"p"},"pre-commit")," package and install the git pre commit hooks, to ensure the code you commit is linted:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"pip install pre-commit\n# in the project folder\npre-commit install\n")),(0,o.kt)("div",{className:"admonition admonition-tip alert alert--success"},(0,o.kt)("div",{parentName:"div",className:"admonition-heading"},(0,o.kt)("h5",{parentName:"div"},(0,o.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,o.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,o.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"tip")),(0,o.kt)("div",{parentName:"div",className:"admonition-content"},(0,o.kt)("p",{parentName:"div"},"For this step you need to have Python on your machine. You may skip this but you will then have to make sure that all the quality tools are run before you push or the CI will fail."))),(0,o.kt)("h3",{id:"setup-the-local-environment-variable-files"},"Setup the local environment variable files"),(0,o.kt)("p",null,"Some of the configuration is done via environment variables, that are actually taken from files in the ",(0,o.kt)("inlineCode",{parentName:"p"},".envs")," directory."),(0,o.kt)("p",null,"First you need to copy ",(0,o.kt)("inlineCode",{parentName:"p"},".envs/local_template")," to ",(0,o.kt)("inlineCode",{parentName:"p"},".envs/.local"),", and fill the values in each file. Most of the values are pre-filled to help you start quickly, but you may need to modify them. For example the PostgreSQL database name and user is set to ",(0,o.kt)("inlineCode",{parentName:"p"},"debug"),", if you choose something else you will have to change that."),(0,o.kt)("p",null,"When using Docker the environment variables will be set directly from the files in ",(0,o.kt)("inlineCode",{parentName:"p"},".envs/.local")," by docker-compose so you don't need to do anything else."),(0,o.kt)("p",null,"When using your own machine directly, you will have to source your terminal with the appropriate file containing the environment variables:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"source .envs/.local/local_no_docker_activate\n")),(0,o.kt)("h2",{id:"install-and-run-without-docker"},"Install and run without Docker"),(0,o.kt)("h3",{id:"database"},"Database"),(0,o.kt)("p",null,"You need to create a PostgreSQL database for the backend, and another one that will be automatically flushed on each run for the end to end tests."),(0,o.kt)("p",null,"By default, if you don't change the values copied from ",(0,o.kt)("inlineCode",{parentName:"p"},".envs/local_template"),", the database name and user name are ",(0,o.kt)("inlineCode",{parentName:"p"},"debug"),", and the end to end database name is ",(0,o.kt)("inlineCode",{parentName:"p"},"connect_access_end_to_end"),"."),(0,o.kt)("p",null,"Here are the commands to create the user and the two databases:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"createuser ${POSTGRES_USER}\ncreatedb ${POSTGRES_DB} -U ${POSTGRES_USER} --password ${POSTGRES_PASSWORD}\ncreatedb ${POSTGRES_DB_END_TO_END} -U ${POSTGRES_USER} --password ${POSTGRES_PASSWORD}\n")),(0,o.kt)("p",null,"If the user creation does not work, you can create it with the psql console (don't forget to replace the user name and apssword):"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"sudo -u postgres psql\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-sql"},"CREATE ROLE debug WITH CREATEDB LOGIN PASSWORD 'debug';\n\\q\n")),(0,o.kt)("h3",{id:"backend"},"Backend"),(0,o.kt)("h4",{id:"install"},"Install"),(0,o.kt)("p",null,"First you need to create a virtual environment for the python packages:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"python3 -m venv venv\n")),(0,o.kt)("p",null,"Then source it, and install the packages needed for local development:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"source venv/bin/activate\npip install -r backend/requirements/local.txt\n")),(0,o.kt)("div",{className:"admonition admonition-tip alert alert--success"},(0,o.kt)("div",{parentName:"div",className:"admonition-heading"},(0,o.kt)("h5",{parentName:"div"},(0,o.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,o.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,o.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"tip")),(0,o.kt)("div",{parentName:"div",className:"admonition-content"},(0,o.kt)("p",{parentName:"div"},"If the installation of some python packages doesn't work because of compilation errors, on linux you may need to install the following dependencies:"),(0,o.kt)("pre",{parentName:"div"},(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"sudo apt install python3.9-dev libpq-dev\n")))),(0,o.kt)("h4",{id:"apply-the-database-migrations"},"Apply the database migrations"),(0,o.kt)("p",null,"When the database has not the latest database migrations applied, you need to run the following command:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"cd backend\npython manage.py migrate\n")),(0,o.kt)("h4",{id:"build-lang-files"},"Build lang files"),(0,o.kt)("p",null,"The french translation has to be built with a command:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"python manage.py compilemessages\n")),(0,o.kt)("h4",{id:"run-the-development-server"},"Run the development server"),(0,o.kt)("p",null,"To run the backend in dev mode, use the Django integrated development server:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"python manage.py runserver\n")),(0,o.kt)("p",null,"By default, the backend will be available on ",(0,o.kt)("a",{parentName:"p",href:"http://localhost:8000"},"localhost:8000")," but without the frontend running there will be nothing displayed there as the root path displays what is available on port 3000."),(0,o.kt)("p",null,"You can however access the other paths served by the backend, especially the browsable API provided by Django Rest Framework on ",(0,o.kt)("a",{parentName:"p",href:"http://localhost:8000/api/"},"localhost:8000/api/"),"."),(0,o.kt)("div",{className:"admonition admonition-info alert alert--info"},(0,o.kt)("div",{parentName:"div",className:"admonition-heading"},(0,o.kt)("h5",{parentName:"div"},(0,o.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,o.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,o.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"}))),"info")),(0,o.kt)("div",{parentName:"div",className:"admonition-content"},(0,o.kt)("p",{parentName:"div"},"In development mode, there are no real emails sent. Everytime an email has to be sent you can see the sent data in the console of the Django development server."))),(0,o.kt)("h3",{id:"frontend"},"Frontend"),(0,o.kt)("h4",{id:"install-1"},"Install"),(0,o.kt)("p",null,"You need to have ",(0,o.kt)("inlineCode",{parentName:"p"},"yarn")," installed to run the frontend commands:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"npm install -g yarn\n")),(0,o.kt)("p",null,"Then you can install the frontend npm packages:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"cd frontend\nyarn install\n")),(0,o.kt)("h4",{id:"build-lang-files-1"},"Build lang files"),(0,o.kt)("p",null,"The french translation has to be built with a command:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"yarn lang:compile\n")),(0,o.kt)("h4",{id:"run-the-development-server-1"},"Run the development server"),(0,o.kt)("p",null,"To run the frontend you need to install and run the development server of React:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"yarn start\n")),(0,o.kt)("p",null,"By default, the frontend will be available on ",(0,o.kt)("a",{parentName:"p",href:"http://localhost:3000"},"localhost:3000")," but you should access the application through ",(0,o.kt)("a",{parentName:"p",href:"http://localhost:8000"},"localhost:8000")," when both the frontend and the backend are running, because the frontend is actually served through a specific view of the Django app."),(0,o.kt)("h2",{id:"install-and-run-with-docker"},"Install and run with Docker"),(0,o.kt)("p",null,"Everything is built and started at once with ",(0,o.kt)("inlineCode",{parentName:"p"},"docker-compose"),", and the local code is mounted to docker, so no need to rebuild at each change."),(0,o.kt)("h3",{id:"build-and-run-the-development-servers"},"Build and run the development servers"),(0,o.kt)("p",null,"You need to build the docker images first, and then run the containers:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"docker-compose -f local.yml build\ndocker-compose -f local.yml up\n")),(0,o.kt)("p",null,"You could also run it in daemon mode, in that case you dont keep the logs in your terminal, and you will have to stop the containers with another command:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"docker-compose -f local.yml up -d\ndocker-compose -f local.yml down\n")),(0,o.kt)("p",null,"As with the non-Docker mode, the frontend server is available on ",(0,o.kt)("a",{parentName:"p",href:"http://localhost:3000"},"localhost:8000")," and the backend server is available on ",(0,o.kt)("a",{parentName:"p",href:"http://localhost:8000"},"localhost:8000"),"."),(0,o.kt)("h3",{id:"execute-commands-on-the-frontend-or-the-backend"},"Execute commands on the frontend or the backend"),(0,o.kt)("p",null,"There is no need to run ",(0,o.kt)("inlineCode",{parentName:"p"},"python manage.py runserver")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"yarn start")," as they are already running, but you can execute any other command on the backend or the frontend:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"docker-compose -f local.yml run -w /app/backend django python manage.py compilemessages\ndocker-compose -f local.yml run -w /app/frontend django yarn lang:compile\n")),(0,o.kt)("h2",{id:"run-docker-stagingproduction-image-locally"},"Run Docker staging/production image locally"),(0,o.kt)("p",null,"Running the staging/production image locally is actually the same as running it on a server as docker abstracts everything that matters. You just need to follow the ",(0,o.kt)("a",{parentName:"p",href:"/docs/user-documentation/deployement"},"deployement instructions")," on your local machine."))}h.isMDXComponent=!0}}]);