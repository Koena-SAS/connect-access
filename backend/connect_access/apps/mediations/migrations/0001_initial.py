# Generated by Django 4.0.8 on 2022-12-08 20:32

import uuid

import django.core.validators
import django.db.models.deletion
import django.utils.timezone
import model_utils.fields
from django.conf import settings
from django.db import migrations, models

import connect_access.apps.mediations.abstract_models
import connect_access.models.fields


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name="MediationRequest",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "created",
                    model_utils.fields.AutoCreatedField(
                        default=django.utils.timezone.now,
                        editable=False,
                        verbose_name="created",
                    ),
                ),
                (
                    "modified",
                    model_utils.fields.AutoLastModifiedField(
                        default=django.utils.timezone.now,
                        editable=False,
                        verbose_name="modified",
                    ),
                ),
                (
                    "uuid",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        unique=True,
                        verbose_name="Public identifier",
                    ),
                ),
                (
                    "request_date",
                    models.DateTimeField(
                        default=django.utils.timezone.now,
                        verbose_name="Date of the request",
                    ),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("pe", "Incomplete"),
                            ("wm", "Waiting for mediator validation"),
                            ("fi", "Request filed"),
                            ("wa", "Waiting for administrative validation"),
                            ("wc", "Waiting for contact"),
                            ("wb", "Waiting for second contact"),
                            ("me", "Mediating"),
                            ("cl", "Closed"),
                            ("fa", "Mediation failed"),
                        ],
                        max_length=2,
                        verbose_name="Status of the request",
                    ),
                ),
                (
                    "first_name",
                    models.CharField(
                        max_length=255, verbose_name="First name / username"
                    ),
                ),
                (
                    "last_name",
                    models.CharField(
                        blank=True, max_length=255, verbose_name="Last name"
                    ),
                ),
                (
                    "email",
                    models.EmailField(
                        blank=True, max_length=254, verbose_name="Email address"
                    ),
                ),
                (
                    "phone_number",
                    connect_access.models.fields.PhoneNumberField(
                        blank=True,
                        max_length=16,
                        validators=[
                            django.core.validators.RegexValidator(
                                message="Phone number must have 8 to 15 digits, and can be preceded by + sign.",
                                regex="^\\+?\\d{8,15}$",
                            )
                        ],
                        verbose_name="Phone number",
                    ),
                ),
                (
                    "assistive_technology_used",
                    connect_access.models.fields.ChoiceArrayField(
                        base_field=models.CharField(
                            blank=True,
                            choices=[
                                ("kb", "Keyboard"),
                                ("sv", "Screen reader with vocal synthesis"),
                                ("bd", "Braille display"),
                                ("zs", "Zoom software"),
                                ("vc", "Vocal command software"),
                                ("ds", "DYS Disorder software"),
                                ("vk", "Virtual keyboard"),
                                ("an", "Adapted navigation dispositive"),
                                ("ek", "Exclusive keyboard navigation"),
                                ("ot", "Other"),
                            ],
                            max_length=2,
                            verbose_name="Assistive technology used",
                        ),
                        blank=True,
                        default=list,
                        size=None,
                        verbose_name="Assistive technologies used",
                    ),
                ),
                (
                    "technology_name",
                    models.TextField(blank=True, verbose_name="Technology name(s)"),
                ),
                (
                    "technology_version",
                    models.TextField(blank=True, verbose_name="Technology version(s)"),
                ),
                (
                    "urgency",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("vu", "Yes, very urgent: need a quick answer"),
                            ("mu", "Moderately, I can wait, but not too long"),
                            (
                                "nu",
                                "Not urgent at all, but would like a solution as soon as possible",
                            ),
                        ],
                        max_length=2,
                        verbose_name="Whether the request is urgent or not",
                    ),
                ),
                (
                    "issue_description",
                    models.TextField(verbose_name="Issue description"),
                ),
                (
                    "step_description",
                    models.TextField(blank=True, verbose_name="Step description"),
                ),
                (
                    "issue_type",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("ay", "Accessibility issue"),
                            ("ug", "Understanding issue, i.e. needs easy-to-read"),
                            ("uy", "Usability issue"),
                        ],
                        max_length=2,
                        verbose_name="Issue type",
                    ),
                ),
                (
                    "inaccessibility_level",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("ia", "Impossible access"),
                            ("ad", "Access possible by bypass but difficult"),
                            (
                                "ra",
                                "Random access, sometimes it works and sometimes it does not",
                            ),
                        ],
                        max_length=2,
                        verbose_name="Inaccessibility level",
                    ),
                ),
                (
                    "browser_used",
                    models.BooleanField(
                        null=True,
                        verbose_name="Whether the problem occured while using a web browser",
                    ),
                ),
                (
                    "url",
                    connect_access.models.fields.DomainNameField(
                        blank=True,
                        max_length=200,
                        validators=[
                            django.core.validators.RegexValidator(
                                message="URL must be at least in the form domain.extension",
                                regex="^(https?:\\/\\/)?(www\\.)?[-a-zA-Z-1-9@:%._+~#=]{1,256}\\.[a-zA-Z0-9()]{1,6}\\b([-a-zA-Z0-9()@:%_+.~#?&//=]*)$",
                            )
                        ],
                        verbose_name="URL address where the problem was encountered",
                    ),
                ),
                (
                    "browser",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("ff", "Firefox"),
                            ("ch", "Chrome"),
                            ("ie", "Internet Explorer"),
                            ("me", "Microsoft Edge"),
                            ("ot", "Other"),
                            ("dn", "Don't know"),
                        ],
                        max_length=2,
                        verbose_name="Browser",
                    ),
                ),
                (
                    "browser_version",
                    models.CharField(
                        blank=True, max_length=255, verbose_name="Browser version"
                    ),
                ),
                (
                    "mobile_app_used",
                    models.BooleanField(
                        null=True,
                        verbose_name="Whether the problem occured while using a mobile app",
                    ),
                ),
                (
                    "mobile_app_platform",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("is", "iOS"),
                            ("ad", "Android"),
                            ("wp", "Windows phone"),
                            ("ot", "Other"),
                        ],
                        max_length=2,
                        verbose_name="The used mobile app platform",
                    ),
                ),
                (
                    "mobile_app_name",
                    models.CharField(
                        blank=True,
                        max_length=255,
                        verbose_name="The used mobile app name",
                    ),
                ),
                (
                    "other_used_software",
                    models.CharField(
                        blank=True,
                        max_length=255,
                        verbose_name="Other software, connected object etc. used to navigate",
                    ),
                ),
                (
                    "did_tell_organization",
                    models.BooleanField(
                        null=True,
                        verbose_name="Whether the organization was told about the problem",
                    ),
                ),
                (
                    "did_organization_reply",
                    models.BooleanField(
                        null=True, verbose_name="Whether the organization replied"
                    ),
                ),
                (
                    "organization_reply",
                    models.TextField(
                        blank=True, verbose_name="The actual organization reply"
                    ),
                ),
                (
                    "further_info",
                    models.TextField(blank=True, verbose_name="Further information"),
                ),
                (
                    "attached_file",
                    models.FileField(
                        blank=True,
                        upload_to=connect_access.apps.mediations.abstract_models.user_directory_path,
                        verbose_name="Attached file",
                    ),
                ),
                (
                    "organization_name",
                    models.CharField(
                        blank=True,
                        max_length=255,
                        verbose_name="Name of the organization",
                    ),
                ),
                (
                    "organization_address",
                    models.CharField(
                        blank=True,
                        max_length=255,
                        verbose_name="Mailing address of the organization",
                    ),
                ),
                (
                    "organization_email",
                    models.EmailField(
                        blank=True,
                        max_length=254,
                        verbose_name="Email address of the organization",
                    ),
                ),
                (
                    "organization_phone_number",
                    connect_access.models.fields.PhoneNumberField(
                        blank=True,
                        max_length=16,
                        validators=[
                            django.core.validators.RegexValidator(
                                message="Phone number must have 8 to 15 digits, and can be preceded by + sign.",
                                regex="^\\+?\\d{8,15}$",
                            )
                        ],
                        verbose_name="Phone number of the organization",
                    ),
                ),
                (
                    "organization_contact",
                    models.CharField(
                        blank=True,
                        max_length=255,
                        verbose_name="Contact of the organization",
                    ),
                ),
                (
                    "complainant",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="User who submitted this request",
                    ),
                ),
            ],
            options={
                "verbose_name": "Mediation request",
                "verbose_name_plural": "Mediation requests",
                "abstract": False,
            },
        ),
    ]
