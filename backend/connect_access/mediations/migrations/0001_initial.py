# Generated by Django 3.0.11 on 2021-02-17 16:41

import connect_access.mediations.models
import django.core.validators
import django.db.models.deletion
import django.utils.timezone
import model_utils.fields
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name="MediationRequest",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "created",
                    model_utils.fields.AutoCreatedField(
                        default=django.utils.timezone.now,
                        editable=False,
                        verbose_name="created",
                    ),
                ),
                (
                    "modified",
                    model_utils.fields.AutoLastModifiedField(
                        default=django.utils.timezone.now,
                        editable=False,
                        verbose_name="modified",
                    ),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("pe", "Incomplete"),
                            ("wm", "Waiting for mediator validation"),
                            ("fi", "Request filed"),
                            ("wa", "Waiting for administrative validation"),
                            ("wc", "Waiting for contact"),
                            ("wb", "Waiting for second contact"),
                            ("me", "Mediating"),
                            ("cl", "Closed"),
                            ("fa", "Mediation failed"),
                        ],
                        max_length=2,
                        verbose_name="Status of the request",
                    ),
                ),
                (
                    "first_name",
                    models.CharField(max_length=255, verbose_name="First name"),
                ),
                (
                    "last_name",
                    models.CharField(max_length=255, verbose_name="Last name"),
                ),
                (
                    "email",
                    models.EmailField(max_length=254, verbose_name="Email address"),
                ),
                (
                    "phone_number",
                    models.CharField(
                        blank=True,
                        max_length=16,
                        validators=[
                            django.core.validators.RegexValidator(
                                message="Phone number must have 9 to 15 digits, and can be preceded by + sign.",
                                regex="^\\+?\\d{9,15}$",
                            )
                        ],
                        verbose_name="Phone number",
                    ),
                ),
                (
                    "assistive_technology_used",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("kb", "Keyboard"),
                            ("sv", "Screen reader with vocal synthesis"),
                            ("bd", "Braille display"),
                            ("zs", "Zoom software"),
                            ("vc", "Vocal command software"),
                            ("ds", "DYS Disorder software"),
                            ("vk", "Virtual keyboard"),
                            ("an", "Adapted navigation dispositive"),
                            ("ot", "Other"),
                        ],
                        max_length=2,
                        verbose_name="Assistive technology used",
                    ),
                ),
                (
                    "technology_name",
                    models.CharField(
                        blank=True, max_length=255, verbose_name="Technology name"
                    ),
                ),
                (
                    "technology_version",
                    models.CharField(
                        blank=True, max_length=255, verbose_name="Technology version"
                    ),
                ),
                (
                    "browser_used",
                    models.BooleanField(
                        blank=True,
                        verbose_name="Whether the problem occured while using a web browser",
                    ),
                ),
                (
                    "url",
                    models.URLField(
                        blank=True,
                        verbose_name="URL address where the problem was encountered",
                    ),
                ),
                (
                    "browser",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("ff", "Firefox"),
                            ("ch", "Chrome"),
                            ("ie", "Internet Explorer"),
                            ("me", "Microsoft Edge"),
                            ("ot", "Other"),
                            ("dn", "Don't know"),
                        ],
                        max_length=2,
                        verbose_name="Browser",
                    ),
                ),
                (
                    "browser_version",
                    models.CharField(
                        blank=True, max_length=255, verbose_name="Browser version"
                    ),
                ),
                ("step_description", models.TextField(verbose_name="Step description")),
                (
                    "issue_description",
                    models.TextField(verbose_name="Issue description"),
                ),
                (
                    "inaccessibility_level",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("ia", "Impossible access"),
                            ("ad", "Access possible by bypass but difficult"),
                            (
                                "ra",
                                "Random access, sometimes it works and sometimes it does not",
                            ),
                        ],
                        max_length=2,
                        verbose_name="Inaccessibility level",
                    ),
                ),
                (
                    "did_tell_organization",
                    models.BooleanField(
                        blank=True,
                        verbose_name="Whether the organization was told about the problem",
                    ),
                ),
                (
                    "did_organization_reply",
                    models.BooleanField(
                        blank=True, verbose_name="Whether the organization replied"
                    ),
                ),
                (
                    "organization_reply",
                    models.TextField(
                        blank=True, verbose_name="The actual organization reply"
                    ),
                ),
                (
                    "further_info",
                    models.TextField(blank=True, verbose_name="Further information"),
                ),
                (
                    "attached_file",
                    models.FileField(
                        upload_to=connect_access.mediations.models.user_directory_path
                    ),
                ),
                (
                    "organization_name",
                    models.CharField(
                        blank=True,
                        max_length=255,
                        verbose_name="Name of the organization",
                    ),
                ),
                (
                    "organization_address",
                    models.CharField(
                        blank=True,
                        max_length=255,
                        verbose_name="Mailing address of the organization",
                    ),
                ),
                (
                    "organization_email",
                    models.EmailField(
                        max_length=254, verbose_name="Email address of the organization"
                    ),
                ),
                (
                    "organization_phone_number",
                    models.CharField(
                        blank=True,
                        max_length=16,
                        validators=[
                            django.core.validators.RegexValidator(
                                message="Phone number must have 9 to 15 digits, and can be preceded by + sign.",
                                regex="^\\+?\\d{9,15}$",
                            )
                        ],
                        verbose_name="Phone number of the organization",
                    ),
                ),
                (
                    "organization_contact",
                    models.CharField(
                        blank=True,
                        max_length=255,
                        verbose_name="Contact of the organization",
                    ),
                ),
                (
                    "complainant",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="User who submitted this request",
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
        ),
    ]
